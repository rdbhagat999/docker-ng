#  build stage
# This line will tell the docker to pull the node image with tag 12.6.1-alpine if the images don't exist. 
# We are also giving a friendly name build to this image so we can refer it later.
FROM node:14-buster-slim AS builder

# Install deps + add Chrome Stable + purge all the things
RUN apt-get update && apt-get install -y \
	apt-transport-https \
	ca-certificates \
	curl \
	gnupg \
	--no-install-recommends \
	&& curl -sSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add - \
	&& echo "deb https://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list \
	&& apt-get update && apt-get install -y \
	google-chrome-unstable \
	fontconfig \
	fonts-ipafont-gothic \
	fonts-wqy-zenhei \
	fonts-thai-tlwg \
	fonts-kacst \
	fonts-symbola \
	fonts-noto \
	fonts-freefont-ttf \
	--no-install-recommends \
	&& apt-get purge --auto-remove -y curl gnupg \
	&& rm -rf /var/lib/apt/lists/*

# This WORKDIR command will create the working directory in our docker image. 
# Going forward any command will be run in the context of this directory.
WORKDIR /app

ENV CHROME_BIN=/usr/bin/google-chrome

# This COPY only package files
COPY package-lock.json package.json ./

# This RUN command will restore node_modules define in our package-lock.json
RUN npm ci

# This COPY command copies all the files from our current directory to the container working directory. this will copy all our source files.
COPY . .

# Default command to be executed when a container is created using this image
CMD ["npm", "run", "start"]
